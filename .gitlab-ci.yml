# This is a simple gitlab continuous integration example project (compatible with the shared runner provided on gitlab.com)
# using the official debian linux based dotnet docker image to build a .NET Core project.
#
# MyProject.sln
#   MyProject\
#      MyProject.csproj (console application)
#   MyProject.Test\
#      MyProject.Test.csproj (test library)
#
# Please find the full example project here:
# https://gitlab.com/tobiaskoch/gitlab-ci-example-dotnetcore

# see https://hub.docker.com/r/microsoft/dotnet/
image: mcr.microsoft.com/dotnet/core/sdk:2.2.301

variables:
 NUGET_PACKAGES_DIRECTORY: '.nupkg'
 RESHARPER_CLI_NAME: 'JetBrains.ReSharper.CommandLineTools.Unix'
 RESHARPER_CLI_VERSION: "2019.2.3"
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .nupkg

.only-default: &only-default
  only:
    - merge_requests

stages:
  - test
  - deploy

release:
  stage: deploy
  only:
    - master
  artifacts:
    paths:
      - publish/
  script:
    # The output path is relative to the position of the csproj-file
    - dotnet publish -c Release -o ../publish MyProject/MyProject.csproj
    
debug:
  only:
    - merge_requests
  cache:
   paths:
    - resharper
  before_script:
   - ls # check cache
   - 'echo | dotnet --version' # must be v 2.2.300 or later for reporter tool to work
   - dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
  stage: test
  script:
    - dotnet test --logger "junit" --collect:"XPlat Code Coverage"
    # each reporttype must be a separate line, doesn't work together ; separated
    - ls -ld ${CI_PROJECT_DIR}/**/TestResults/*
    - mkdir -p public
    - ./tools/reportgenerator "-reports:${CI_PROJECT_DIR}/**/TestResults/*/coverage.cobertura.xml" "-targetdir:Reports_Coverage" -reportTypes:TextSummary;
    - ./tools/reportgenerator "-reports:${CI_PROJECT_DIR}/**/TestResults/*/coverage.cobertura.xml" "-targetdir:Reports_Coverage" -reportTypes:Html;
    - ./tools/reportgenerator "-reports:${CI_PROJECT_DIR}/**/TestResults/*/coverage.cobertura.xml" "-targetdir:public" -reportTypes:Badges;
    - ls Reports_Coverage
    - cat ./Reports_Coverage/Summary.txt | grep 'Line coverage'
  coverage: /Line coverage[\s\S].+%/
  artifacts:
    paths:
      - Reports_Coverage/
      - public
    reports:
      junit:
        - '*.Test/TestResults/TestResults.xml'

# takes upwards of 10 minutes, make manual, working on cache
codeclimate:
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay
    CONTAINER_IMAGE: codeclimate/codeclimate
    CONTAINER_TAG: '0.85.2'
  services:
    - docker:dind
  when: manual
  stage: test
  script:
    - docker pull $CONTAINER_IMAGE
    - mkdir -p CodeQuality
    - docker run 
       --env CODECLIMATE_DEBUG=1 
       --env CODECLIMATE_CODE="$PWD" 
       --volume "$PWD":/code 
       --volume /var/run/docker.sock:/var/run/docker.sock 
       --volume /tmp/cc:/tmp/cc 
       $CONTAINER_IMAGE:$CONTAINER_TAG analyze -f html > CodeQuality/codeclimateReport.html
    - docker run 
       --env CODECLIMATE_DEBUG=1 
       --env CODECLIMATE_CODE="$PWD" 
       --volume "$PWD":/code 
       --volume /var/run/docker.sock:/var/run/docker.sock 
       --volume /tmp/cc:/tmp/cc 
       $CONTAINER_IMAGE:$CONTAINER_TAG analyze -f json > CodeQuality/codeclimateReport.json
  artifacts:
    paths:
      - CodeQuality/
  dependencies: []
  except:
    variables:
      - $CODE_QUALITY_DISABLED

code_docs:
  stage: test
  image: mono:latest
  when: manual
  script:
    - apt update && apt install -y curl zip unzip
    - curl -LO "https://github.com/dotnet/docfx/releases/download/v2.48/docfx.zip"
    - unzip -q docfx.zip -d "docfx"
    - mono ./docfx/docfx.exe
    # - powershell.exe -NoP -NonI -Command "Expand-Archive '.\docfx.zip' '.\docfx\'" 
  artifacts:
    paths:
      - _site/

# should take less than 10 minutes if taking longer just cancel rerun, should use DotSettings file to exclude lib files
resharper_inspect:
  when: manual
  cache:
   paths:
    - resharper
  stage: test
  script:
    - dotnet restore --packages="$NUGET_PACKAGES_DIRECTORY"
    - >
      if [ ! -d "resharper" ]; then
        apt update && apt install -y curl zip unzip
        curl -LO "https://download.jetbrains.com/resharper/ReSharperUltimate.$RESHARPER_CLI_VERSION/$RESHARPER_CLI_NAME.$RESHARPER_CLI_VERSION.zip"
        unzip $RESHARPER_CLI_NAME.$RESHARPER_CLI_VERSION.zip -d "resharper"
      fi
    - mkdir -p CodeQuality
    - files=(*.sln)
    - sh resharper/inspectcode.sh "${files[0]}" --output=CodeQuality/inspectcodeReport.html --format=Html
  timeout: 5m
  retry: 2
  artifacts:
    paths:
      - CodeQuality/
      
# only takes 1 minute to run
resharper_dup:
  only:
    - merge_requests
  cache:
    paths:
      - resharper
  stage: test
  script:
    - dotnet restore --packages="$NUGET_PACKAGES_DIRECTORY"
    - >
      if [ ! -d "resharper" ]; then
        apt update && apt install -y curl zip unzip
        curl -LO "https://download.jetbrains.com/resharper/ReSharperUltimate.$RESHARPER_CLI_VERSION/$RESHARPER_CLI_NAME.$RESHARPER_CLI_VERSION.zip"
        unzip $RESHARPER_CLI_NAME.$RESHARPER_CLI_VERSION.zip -d "resharper"
      fi
    - mkdir -p CodeQuality
    - files=(*.sln)
    - sh resharper/dupfinder.sh "${files[0]}" --output=CodeQuality/dupfinderReport.html --format=Html
  artifacts:
    paths:
      - CodeQuality/